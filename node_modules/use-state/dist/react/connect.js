'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

const React = require('react');
const PureComponent = React.PureComponent,
      PropTypes = React.PropTypes;

const BasicStore = require('../basic-store');

function connect(YourComponent) {
  let mapToProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultMapToProps;

  class ConnectComponent extends PureComponent {

    constructor(props, context) {
      super(props, context);

      const store = context.store;

      this.state = _extends({}, this.getMapProps(store.state));

      this._unsubscribe = store.subscribe(newState => {
        this.setState(_extends({}, this.getMapProps(newState)));
      });
    }

    componentWillUnmount() {
      if (this._unsubscribe) {
        this._unsubscribe();
        this._unsubscribe = null;
      }
    }

    getMapProps(state) {
      const dispatch = this.context.store.dispatch;
      const mprops = mapToProps(state, dispatch);
      if (!mprops) return { state: state, dispatch: dispatch };
      if (!mprops.dispatch) mprops.dispatch = dispatch;
      return mprops;
    }

    render() {
      return React.createElement(YourComponent, _extends({}, this.props, this.state));
    }
  }

  ConnectComponent.propTypes = {};
  ConnectComponent.contextTypes = {
    store: PropTypes.instanceOf(BasicStore)
  };
  return ConnectComponent;
}

function defaultMapToProps(state, dispatch) {
  return { state: state, dispatch: dispatch };
}

module.exports = connect;