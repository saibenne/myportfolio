'use strict';

const compose = require('use-compose');

// const createContainerComponent = require('./react');

class BasicStore {
  // composed middleware

  // listeners called on state changed
  constructor() {
    var _this = this;

    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    this._state = null;
    this._subscribers = [];
    this._middlewares = [];
    this._stack = null;

    this.use = function () {
      for (var _len = arguments.length, middlewares = Array(_len), _key = 0; _key < _len; _key++) {
        middlewares[_key] = arguments[_key];
      }

      _this._stack = null;
      for (const middleware of middlewares) {
        if (typeof middleware !== 'function') throw new TypeError('Only accept function in use()');
        _this._middlewares.push(middleware);
      }
      return _this;
    };

    this.subscribe = listener => {
      this._subscribers.push(listener);
      const unsubscribe = () => this._subscribers.splice(this._subscribers.indexOf(listener), 1);
      return unsubscribe;
    };

    this.dispatch = function (url) {
      let body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!url || typeof url !== 'string') throw new Error('Require url in dispatch()');

      if (!_this._stack) _this._stack = compose(_this._middlewares); // cache stack

      const req = { store: _this, method: true, url: url, body: body };
      const resp = _this;

      return _this._stack(req, resp);
    };

    const state = options.state;

    this._state = state || {};
  } // middleware(funcitons) array


  get state() {
    return this._state;
  }

  setState(newState) {
    if (!newState || typeof newState !== 'object') return;
    if (newState === this._state) return;
    const oldState = this._state;
    this._state = newState;

    this._subscribers.forEach(listener => listener(newState, oldState));
  }

  // createContainer = (...args) => createContainerComponent(...args)
}

module.exports = BasicStore;