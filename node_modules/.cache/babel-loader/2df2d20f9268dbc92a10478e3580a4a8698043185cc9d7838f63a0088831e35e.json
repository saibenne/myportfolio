{"ast":null,"code":"'use strict';\n\nconst isPlainObject = require('lodash.isplainobject');\nvar _require = require('./map');\nconst Map2 = _require.Map;\nconst MODELS = {}; // {<name>: <model>}\n\nclass Model extends Map2 {\n  // all records(instances) of this model, {id: record}\n\n  static bindStore(store) {\n    if (this._store && this._store !== store) throw new Error('Model already bound to other store');\n    this._store = store;\n  } // the bound global store\n\n  static findById(id) {\n    return this.records[id] || null;\n  }\n  static merge(records) {\n    if (!this._store) throw new Error(`No bound store of model ${this._name}`);\n    if (!records || records.length <= 0) return [];\n    if (!Array.isArray(records)) records = [records];\n    const Class = this;\n    return records.map(record => {\n      if (!record) throw new Error('Require record in merge()');\n      if (!(record instanceof Class)) {\n        if (!isPlainObject(record)) {\n          throw new TypeError('Require model instance or plain object in merge()');\n        }\n        if (!record.id) throw new Error('Require id in record');\n        if (this.records[record.id]) {\n          return this.records[record.id].update(record);\n        } else {\n          const instance = new Class({\n            store: this._store,\n            value: record\n          });\n          this.records[record.id] = instance;\n          return instance;\n        }\n      } else {\n        const id = record.readKeyValue('id');\n        if (this.records[id]) {\n          return this.records[id].update(record);\n        } else {\n          this.records[record.id] = record;\n          return record;\n        }\n      }\n    });\n  }\n  static derive(SubClass) {\n    Map2.derive(SubClass);\n    SubClass._name = null; // eslint-disable-line no-underscore-dangle\n    SubClass._store = null; // eslint-disable-line no-underscore-dangle\n    SubClass.records = {};\n    SubClass.merge = this.merge;\n    if (!SubClass.derive) SubClass.derive = this.derive;\n  }\n  init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const value = options.value;\n    if (value && !value.id) throw new Error('Require non-empty id on initing');\n    this.constructor.records[value.id] = this;\n    super.init(options);\n  }\n  getId() {\n    return this._data.id || null;\n  }\n  remove() {\n    delete this.constructor.records[this._data.id];\n  }\n  writeKeyValue(key, value) {\n    if (key === 'id') throw new Error('Can\\'t change id value of model');\n    super.writeKeyValue(key, value);\n    this.constructor.records[this._data.id] = this;\n  }\n}\nModel._name = null;\nModel._store = null;\nModel.records = null;\nMap2.derive(Model);\nfunction createModel(name, def) {\n  if (!name) throw new Error('Require model name');\n  if (MODELS[name]) {\n    if (def) throw new Error(`Can't redefine model ${name}`);\n    return MODELS[name];\n  }\n  class DerivedModel extends Model {}\n  Model.derive(DerivedModel);\n  DerivedModel.addKey(def);\n  if (!def || !def.id) DerivedModel.addKey('id', String);\n  DerivedModel._name = name; // eslint-disable-line no-underscore-dangle\n  def = null;\n  MODELS[name] = DerivedModel;\n  return DerivedModel;\n}\n\n// test usage only\nfunction clearModels() {\n  Object.keys(MODELS).forEach(name => delete MODELS[name]);\n}\nmodule.exports = {\n  createModel: createModel,\n  Model: Model,\n  clearModels: clearModels\n};","map":{"version":3,"names":["isPlainObject","require","_require","Map2","Map","MODELS","Model","bindStore","store","_store","Error","findById","id","records","merge","_name","length","Array","isArray","Class","map","record","TypeError","update","instance","value","readKeyValue","derive","SubClass","init","options","arguments","undefined","constructor","getId","_data","remove","writeKeyValue","key","createModel","name","def","DerivedModel","addKey","String","clearModels","Object","keys","forEach","module","exports"],"sources":["C:/Users/sai/Desktop/Portfolio/template1/node_modules/use-state/dist/structures/model.js"],"sourcesContent":["'use strict';\n\nconst isPlainObject = require('lodash.isplainobject');\n\nvar _require = require('./map');\n\nconst Map2 = _require.Map;\n\n\nconst MODELS = {}; // {<name>: <model>}\n\nclass Model extends Map2 {\n  // all records(instances) of this model, {id: record}\n\n  static bindStore(store) {\n    if (this._store && this._store !== store) throw new Error('Model already bound to other store');\n    this._store = store;\n  } // the bound global store\n\n\n  static findById(id) {\n    return this.records[id] || null;\n  }\n\n  static merge(records) {\n    if (!this._store) throw new Error(`No bound store of model ${ this._name }`);\n    if (!records || records.length <= 0) return [];\n    if (!Array.isArray(records)) records = [records];\n\n    const Class = this;\n    return records.map(record => {\n      if (!record) throw new Error('Require record in merge()');\n\n      if (!(record instanceof Class)) {\n        if (!isPlainObject(record)) {\n          throw new TypeError('Require model instance or plain object in merge()');\n        }\n        if (!record.id) throw new Error('Require id in record');\n        if (this.records[record.id]) {\n          return this.records[record.id].update(record);\n        } else {\n          const instance = new Class({ store: this._store, value: record });\n          this.records[record.id] = instance;\n          return instance;\n        }\n      } else {\n        const id = record.readKeyValue('id');\n        if (this.records[id]) {\n          return this.records[id].update(record);\n        } else {\n          this.records[record.id] = record;\n          return record;\n        }\n      }\n    });\n  }\n\n  static derive(SubClass) {\n    Map2.derive(SubClass);\n\n    SubClass._name = null; // eslint-disable-line no-underscore-dangle\n    SubClass._store = null; // eslint-disable-line no-underscore-dangle\n    SubClass.records = {};\n\n    SubClass.merge = this.merge;\n    if (!SubClass.derive) SubClass.derive = this.derive;\n  }\n\n  init() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const value = options.value;\n\n    if (value && !value.id) throw new Error('Require non-empty id on initing');\n    this.constructor.records[value.id] = this;\n\n    super.init(options);\n  }\n\n  getId() {\n    return this._data.id || null;\n  }\n\n  remove() {\n    delete this.constructor.records[this._data.id];\n  }\n\n  writeKeyValue(key, value) {\n    if (key === 'id') throw new Error('Can\\'t change id value of model');\n    super.writeKeyValue(key, value);\n    this.constructor.records[this._data.id] = this;\n  }\n}\nModel._name = null;\nModel._store = null;\nModel.records = null;\nMap2.derive(Model);\n\nfunction createModel(name, def) {\n  if (!name) throw new Error('Require model name');\n  if (MODELS[name]) {\n    if (def) throw new Error(`Can't redefine model ${ name }`);\n    return MODELS[name];\n  }\n\n  class DerivedModel extends Model {}\n  Model.derive(DerivedModel);\n  DerivedModel.addKey(def);\n  if (!def || !def.id) DerivedModel.addKey('id', String);\n  DerivedModel._name = name; // eslint-disable-line no-underscore-dangle\n  def = null;\n\n  MODELS[name] = DerivedModel;\n\n  return DerivedModel;\n}\n\n// test usage only\nfunction clearModels() {\n  Object.keys(MODELS).forEach(name => delete MODELS[name]);\n}\n\nmodule.exports = { createModel: createModel, Model: Model, clearModels: clearModels };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}