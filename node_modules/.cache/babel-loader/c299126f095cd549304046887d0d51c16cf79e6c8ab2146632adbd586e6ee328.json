{"ast":null,"code":"'use strict';\n\n/**\n * Compose multiple middlewares(functions) to the one.\n * A middleware is a function with characterisitic of `(a, b, next)`.\n * Calling `next` function to invoke next middleware. `next()` will return next\n * milddware's return which will be always wrapped in the Promise.\n */\nfunction compose(middlewares) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const beforeRunMiddleware = options.beforeRunMiddleware; // before invoking the middleware, check whether can be run\n\n  // all middleware should be function\n\n  if (!Array.isArray(middlewares)) middlewares = [middlewares];\n  for (const mw of middlewares) {\n    if (typeof mw !== 'function') throw new TypeError('middleware should be a function');\n  }\n  return function ComposedMiddleware(req, resp, next) {\n    let doRunMiddleware;\n    let lastIndex = -1; // last run middleware index\n    const runMiddleware = index => {\n      if (lastIndex >= index) {\n        return Promise.reject(new Error('next() called multiple times'));\n      }\n      lastIndex = index;\n      const middleware = middlewares[index];\n      if (middleware && beforeRunMiddleware) {\n        return Promise.resolve(beforeRunMiddleware(middleware, req, resp)).then(canRun => {\n          if (!canRun) return runMiddleware(index + 1);else return doRunMiddleware(index);\n        });\n      }\n      return doRunMiddleware(index);\n    };\n    doRunMiddleware = index => {\n      let middleware = middlewares[index];\n      const nextIndex = index + 1;\n      let runNextMiddleware = noop;\n      if (!middleware) {\n        if (next) middleware = next;\n      } else if (middlewares[nextIndex] || next) {\n        runNextMiddleware = () => runMiddleware(nextIndex);\n      }\n      try {\n        let result;\n        if (middleware) result = middleware.call(this, req, resp, runNextMiddleware);\n        return Promise.resolve(result);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n    return runMiddleware(0);\n  };\n}\nfunction noop() {}\nmodule.exports = compose;","map":{"version":3,"names":["compose","middlewares","options","arguments","length","undefined","beforeRunMiddleware","Array","isArray","mw","TypeError","ComposedMiddleware","req","resp","next","doRunMiddleware","lastIndex","runMiddleware","index","Promise","reject","Error","middleware","resolve","then","canRun","nextIndex","runNextMiddleware","noop","result","call","e","module","exports"],"sources":["C:/Users/sai/Desktop/Portfolio/template1/node_modules/use-compose/dist/index.js"],"sourcesContent":["'use strict';\n\n/**\n * Compose multiple middlewares(functions) to the one.\n * A middleware is a function with characterisitic of `(a, b, next)`.\n * Calling `next` function to invoke next middleware. `next()` will return next\n * milddware's return which will be always wrapped in the Promise.\n */\n\nfunction compose(middlewares) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const beforeRunMiddleware = options.beforeRunMiddleware; // before invoking the middleware, check whether can be run\n\n  // all middleware should be function\n\n  if (!Array.isArray(middlewares)) middlewares = [middlewares];\n  for (const mw of middlewares) {\n    if (typeof mw !== 'function') throw new TypeError('middleware should be a function');\n  }\n\n  return function ComposedMiddleware(req, resp, next) {\n    let doRunMiddleware;\n\n    let lastIndex = -1; // last run middleware index\n    const runMiddleware = index => {\n      if (lastIndex >= index) {\n        return Promise.reject(new Error('next() called multiple times'));\n      }\n      lastIndex = index;\n\n      const middleware = middlewares[index];\n      if (middleware && beforeRunMiddleware) {\n        return Promise.resolve(beforeRunMiddleware(middleware, req, resp)).then(canRun => {\n          if (!canRun) return runMiddleware(index + 1);else return doRunMiddleware(index);\n        });\n      }\n\n      return doRunMiddleware(index);\n    };\n\n    doRunMiddleware = index => {\n      let middleware = middlewares[index];\n      const nextIndex = index + 1;\n\n      let runNextMiddleware = noop;\n      if (!middleware) {\n        if (next) middleware = next;\n      } else if (middlewares[nextIndex] || next) {\n        runNextMiddleware = () => runMiddleware(nextIndex);\n      }\n\n      try {\n        let result;\n        if (middleware) result = middleware.call(this, req, resp, runNextMiddleware);\n        return Promise.resolve(result);\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    };\n\n    return runMiddleware(0);\n  };\n}\n\nfunction noop() {}\n\nmodule.exports = compose;"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAOA,CAACC,WAAW,EAAE;EAC5B,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;EACpF,MAAMG,mBAAmB,GAAGJ,OAAO,CAACI,mBAAmB,CAAC,CAAC;;EAEzD;;EAEA,IAAI,CAACC,KAAK,CAACC,OAAO,CAACP,WAAW,CAAC,EAAEA,WAAW,GAAG,CAACA,WAAW,CAAC;EAC5D,KAAK,MAAMQ,EAAE,IAAIR,WAAW,EAAE;IAC5B,IAAI,OAAOQ,EAAE,KAAK,UAAU,EAAE,MAAM,IAAIC,SAAS,CAAC,iCAAiC,CAAC;EACtF;EAEA,OAAO,SAASC,kBAAkBA,CAACC,GAAG,EAAEC,IAAI,EAAEC,IAAI,EAAE;IAClD,IAAIC,eAAe;IAEnB,IAAIC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;IACpB,MAAMC,aAAa,GAAGC,KAAK,IAAI;MAC7B,IAAIF,SAAS,IAAIE,KAAK,EAAE;QACtB,OAAOC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,8BAA8B,CAAC,CAAC;MAClE;MACAL,SAAS,GAAGE,KAAK;MAEjB,MAAMI,UAAU,GAAGrB,WAAW,CAACiB,KAAK,CAAC;MACrC,IAAII,UAAU,IAAIhB,mBAAmB,EAAE;QACrC,OAAOa,OAAO,CAACI,OAAO,CAACjB,mBAAmB,CAACgB,UAAU,EAAEV,GAAG,EAAEC,IAAI,CAAC,CAAC,CAACW,IAAI,CAACC,MAAM,IAAI;UAChF,IAAI,CAACA,MAAM,EAAE,OAAOR,aAAa,CAACC,KAAK,GAAG,CAAC,CAAC,CAAC,KAAK,OAAOH,eAAe,CAACG,KAAK,CAAC;QACjF,CAAC,CAAC;MACJ;MAEA,OAAOH,eAAe,CAACG,KAAK,CAAC;IAC/B,CAAC;IAEDH,eAAe,GAAGG,KAAK,IAAI;MACzB,IAAII,UAAU,GAAGrB,WAAW,CAACiB,KAAK,CAAC;MACnC,MAAMQ,SAAS,GAAGR,KAAK,GAAG,CAAC;MAE3B,IAAIS,iBAAiB,GAAGC,IAAI;MAC5B,IAAI,CAACN,UAAU,EAAE;QACf,IAAIR,IAAI,EAAEQ,UAAU,GAAGR,IAAI;MAC7B,CAAC,MAAM,IAAIb,WAAW,CAACyB,SAAS,CAAC,IAAIZ,IAAI,EAAE;QACzCa,iBAAiB,GAAGA,CAAA,KAAMV,aAAa,CAACS,SAAS,CAAC;MACpD;MAEA,IAAI;QACF,IAAIG,MAAM;QACV,IAAIP,UAAU,EAAEO,MAAM,GAAGP,UAAU,CAACQ,IAAI,CAAC,IAAI,EAAElB,GAAG,EAAEC,IAAI,EAAEc,iBAAiB,CAAC;QAC5E,OAAOR,OAAO,CAACI,OAAO,CAACM,MAAM,CAAC;MAChC,CAAC,CAAC,OAAOE,CAAC,EAAE;QACV,OAAOZ,OAAO,CAACC,MAAM,CAACW,CAAC,CAAC;MAC1B;IACF,CAAC;IAED,OAAOd,aAAa,CAAC,CAAC,CAAC;EACzB,CAAC;AACH;AAEA,SAASW,IAAIA,CAAA,EAAG,CAAC;AAEjBI,MAAM,CAACC,OAAO,GAAGjC,OAAO","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}