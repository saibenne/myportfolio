{"ast":null,"code":"'use strict';\n\nconst Store = require('./basic-store');\nvar _require = require('./structures/map');\nconst createMap = _require.createMap;\nconst parseType = require('./structures/parse-type');\n\n// use random to avoid duplicate id on hot reload\nlet MUTATION_ID_SEQ = parseInt(Math.random() * 100, 10);\nclass StructureStore extends Store {\n  // represents the mutation id once calling mutate()\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    super(options);\n    this._Type = null;\n    this.mutationId = null;\n    const structure = options.structure,\n      state = options.state;\n\n    // structure only support map type\n\n    var _parseType = parseType(structure);\n    const type = _parseType.type,\n      Type = _parseType.Type;\n    if (type !== 'undefined' && type !== 'map') throw new Error(`Invalid type ${type} of structure`);\n    if (type === 'undefined') {\n      this._Type = createMap();\n    } else {\n      this._Type = Type;\n    }\n    this._state = new this._Type({\n      store: this,\n      value: state\n    });\n  }\n\n  // start a new mutation operation. `cb` function should only has sync codes\n  // structure type(class)\n  mutate(cb) {\n    if (this.mutationId) {\n      throw new Error('Can\\'t open another mutation operation');\n    }\n    if (!cb || typeof cb !== 'function') {\n      throw new TypeError('Require callback function in store.mutate()');\n    }\n    try {\n      this.mutationId = MUTATION_ID_SEQ;\n      MUTATION_ID_SEQ = (MUTATION_ID_SEQ + 1) % 2147483647;\n      const newState = this._state.clone();\n      cb(newState);\n      newState.bubbleModelMutation();\n      const isChanged = newState.isChanged();\n      this.mutationId = null;\n      if (isChanged) super.setState(newState);\n    } catch (e) {\n      this.mutationId = null;\n      throw e;\n    }\n  }\n  setState(newState) {\n    // eslint-disable-line class-methods-use-this\n    throw new Error('Can\\'t call store.setState() directly');\n    // if (this.mutationId) {\n    //   throw new Error('Don\\'t call store.setState() directly in store.mutate()');\n    // }\n    // if (!(newState instanceof this._Type)) {\n    //   throw new TypeError('Invalid state. Don\\'t call store.setState() directly');\n    // }\n    // super.setState(newState);\n  }\n}\nmodule.exports = StructureStore;","map":{"version":3,"names":["Store","require","_require","createMap","parseType","MUTATION_ID_SEQ","parseInt","Math","random","StructureStore","constructor","options","arguments","length","undefined","_Type","mutationId","structure","state","_parseType","type","Type","Error","_state","store","value","mutate","cb","TypeError","newState","clone","bubbleModelMutation","isChanged","setState","e","module","exports"],"sources":["C:/Users/sai/Desktop/Portfolio/template1/node_modules/use-state/dist/structure-store.js"],"sourcesContent":["'use strict';\n\nconst Store = require('./basic-store');\n\nvar _require = require('./structures/map');\n\nconst createMap = _require.createMap;\n\nconst parseType = require('./structures/parse-type');\n\n// use random to avoid duplicate id on hot reload\nlet MUTATION_ID_SEQ = parseInt(Math.random() * 100, 10);\n\nclass StructureStore extends Store {\n  // represents the mutation id once calling mutate()\n\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    super(options);\n    this._Type = null;\n    this.mutationId = null;\n    const structure = options.structure,\n          state = options.state;\n\n    // structure only support map type\n\n    var _parseType = parseType(structure);\n\n    const type = _parseType.type,\n          Type = _parseType.Type;\n\n    if (type !== 'undefined' && type !== 'map') throw new Error(`Invalid type ${ type } of structure`);\n    if (type === 'undefined') {\n      this._Type = createMap();\n    } else {\n      this._Type = Type;\n    }\n    this._state = new this._Type({ store: this, value: state });\n  }\n\n  // start a new mutation operation. `cb` function should only has sync codes\n  // structure type(class)\n  mutate(cb) {\n    if (this.mutationId) {\n      throw new Error('Can\\'t open another mutation operation');\n    }\n    if (!cb || typeof cb !== 'function') {\n      throw new TypeError('Require callback function in store.mutate()');\n    }\n\n    try {\n      this.mutationId = MUTATION_ID_SEQ;\n      MUTATION_ID_SEQ = (MUTATION_ID_SEQ + 1) % 2147483647;\n\n      const newState = this._state.clone();\n      cb(newState);\n\n      newState.bubbleModelMutation();\n      const isChanged = newState.isChanged();\n\n      this.mutationId = null;\n      if (isChanged) super.setState(newState);\n    } catch (e) {\n      this.mutationId = null;\n      throw e;\n    }\n  }\n\n  setState(newState) {\n    // eslint-disable-line class-methods-use-this\n    throw new Error('Can\\'t call store.setState() directly');\n    // if (this.mutationId) {\n    //   throw new Error('Don\\'t call store.setState() directly in store.mutate()');\n    // }\n    // if (!(newState instanceof this._Type)) {\n    //   throw new TypeError('Invalid state. Don\\'t call store.setState() directly');\n    // }\n    // super.setState(newState);\n  }\n}\n\nmodule.exports = StructureStore;"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,KAAK,GAAGC,OAAO,CAAC,eAAe,CAAC;AAEtC,IAAIC,QAAQ,GAAGD,OAAO,CAAC,kBAAkB,CAAC;AAE1C,MAAME,SAAS,GAAGD,QAAQ,CAACC,SAAS;AAEpC,MAAMC,SAAS,GAAGH,OAAO,CAAC,yBAAyB,CAAC;;AAEpD;AACA,IAAII,eAAe,GAAGC,QAAQ,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC;AAEvD,MAAMC,cAAc,SAAST,KAAK,CAAC;EACjC;;EAEAU,WAAWA,CAAA,EAAG;IACZ,IAAIC,OAAO,GAAGC,SAAS,CAACC,MAAM,GAAG,CAAC,IAAID,SAAS,CAAC,CAAC,CAAC,KAAKE,SAAS,GAAGF,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAEpF,KAAK,CAACD,OAAO,CAAC;IACd,IAAI,CAACI,KAAK,GAAG,IAAI;IACjB,IAAI,CAACC,UAAU,GAAG,IAAI;IACtB,MAAMC,SAAS,GAAGN,OAAO,CAACM,SAAS;MAC7BC,KAAK,GAAGP,OAAO,CAACO,KAAK;;IAE3B;;IAEA,IAAIC,UAAU,GAAGf,SAAS,CAACa,SAAS,CAAC;IAErC,MAAMG,IAAI,GAAGD,UAAU,CAACC,IAAI;MACtBC,IAAI,GAAGF,UAAU,CAACE,IAAI;IAE5B,IAAID,IAAI,KAAK,WAAW,IAAIA,IAAI,KAAK,KAAK,EAAE,MAAM,IAAIE,KAAK,CAAE,gBAAgBF,IAAM,eAAc,CAAC;IAClG,IAAIA,IAAI,KAAK,WAAW,EAAE;MACxB,IAAI,CAACL,KAAK,GAAGZ,SAAS,CAAC,CAAC;IAC1B,CAAC,MAAM;MACL,IAAI,CAACY,KAAK,GAAGM,IAAI;IACnB;IACA,IAAI,CAACE,MAAM,GAAG,IAAI,IAAI,CAACR,KAAK,CAAC;MAAES,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAEP;IAAM,CAAC,CAAC;EAC7D;;EAEA;EACA;EACAQ,MAAMA,CAACC,EAAE,EAAE;IACT,IAAI,IAAI,CAACX,UAAU,EAAE;MACnB,MAAM,IAAIM,KAAK,CAAC,wCAAwC,CAAC;IAC3D;IACA,IAAI,CAACK,EAAE,IAAI,OAAOA,EAAE,KAAK,UAAU,EAAE;MACnC,MAAM,IAAIC,SAAS,CAAC,6CAA6C,CAAC;IACpE;IAEA,IAAI;MACF,IAAI,CAACZ,UAAU,GAAGX,eAAe;MACjCA,eAAe,GAAG,CAACA,eAAe,GAAG,CAAC,IAAI,UAAU;MAEpD,MAAMwB,QAAQ,GAAG,IAAI,CAACN,MAAM,CAACO,KAAK,CAAC,CAAC;MACpCH,EAAE,CAACE,QAAQ,CAAC;MAEZA,QAAQ,CAACE,mBAAmB,CAAC,CAAC;MAC9B,MAAMC,SAAS,GAAGH,QAAQ,CAACG,SAAS,CAAC,CAAC;MAEtC,IAAI,CAAChB,UAAU,GAAG,IAAI;MACtB,IAAIgB,SAAS,EAAE,KAAK,CAACC,QAAQ,CAACJ,QAAQ,CAAC;IACzC,CAAC,CAAC,OAAOK,CAAC,EAAE;MACV,IAAI,CAAClB,UAAU,GAAG,IAAI;MACtB,MAAMkB,CAAC;IACT;EACF;EAEAD,QAAQA,CAACJ,QAAQ,EAAE;IACjB;IACA,MAAM,IAAIP,KAAK,CAAC,uCAAuC,CAAC;IACxD;IACA;IACA;IACA;IACA;IACA;IACA;EACF;AACF;AAEAa,MAAM,CAACC,OAAO,GAAG3B,cAAc","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}